/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HeadingPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  showHeadingsForAllFolders: true,
  showHeadingFolders: [],
  showHeadings: true,
  showHeading1: true,
  showHeading2: true,
  showHeading3: true,
  showHeading4: true,
  showHeading5: true,
  showHeading6: true,
  regexArray: [
    {
      pattern: "^\\*\\*([^*]+)\\*\\*$",
      level: 7
    }
  ]
};
var USER_SETTINGS = structuredClone(
  DEFAULT_SETTINGS
);
var HeadingPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.settings = USER_SETTINGS;
    this.lastActiveMarkdownLeaf = null;
    this.cachedHeadings = {};
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new HeadingSettingTab(this.app, this));
    let retries = 0;
    const timedRetry = () => {
      try {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          this.lastActiveMarkdownLeaf = markdownView.leaf;
        }
        this.init();
      } catch (e) {
        if (retries > 5) {
          new import_obsidian.Notice(
            "Failed to initialize headings plugin." + e.message
          );
          return;
        }
        retries++;
        setTimeout(timedRetry, 1e3);
      }
    };
    this.app.workspace.onLayoutReady(timedRetry);
    const onFileModified = async (file) => {
      if (!this.settings.showHeadings) {
        return;
      }
      if (file instanceof import_obsidian.TFile && file.extension === "md") {
        setTimeout(async () => {
          const headingsForFile = await this.createHeadingsForFile(
            file
          );
          this.cachedHeadings[file.name] = headingsForFile;
          this.clearExplorerHeight();
        }, 500);
      }
    };
    this.registerEvent(this.app.vault.on("modify", onFileModified));
    this.registerEvent(this.app.vault.on("rename", onFileModified));
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", (leaf) => {
        if (leaf && leaf.view.getViewType() === "markdown") {
          this.lastActiveMarkdownLeaf = leaf;
        }
      })
    );
    this.addCommand({
      id: "toggle-headings",
      name: "Toggle File Explorer Headings",
      callback: async () => {
        this.settings.showHeadings = !this.settings.showHeadings;
        await this.saveSettings();
        await this.recalculateHeadings();
      }
    });
    this.app.workspace.onLayoutReady(async () => {
      const items = await this.getFileExplorerFileItems();
      const fileItem = items[Object.keys(items)[0]];
      await this.applyTitleUpdatePatch(fileItem);
      this.registerFolderHeadingContextMenu();
    });
  }
  // binary search sorted array to find closest line on or above target
  findClosestLineOnOrAbove(headingArray, target) {
    if (headingArray.length === 0)
      return null;
    let start = 0;
    let end = headingArray.length - 1;
    let bestMatch = null;
    while (start <= end) {
      const mid = Math.floor((start + end) / 2);
      const currentLine = headingArray[mid].line;
      if (currentLine === target) {
        return headingArray[mid];
      } else if (currentLine < target) {
        bestMatch = headingArray[mid];
        start = mid + 1;
      } else {
        end = mid - 1;
      }
    }
    return bestMatch;
  }
  /**
   * Patch FileTreeItem's updateTitle to add headings whenever a new file item is rendered
   *
   * @param fileItem A file item used to get the FileTreeItem prototype
   * @returns
   */
  async applyTitleUpdatePatch(fileItem) {
    const proto = Object.getPrototypeOf(fileItem);
    if (proto._obsidianHeadingPlugin_patched)
      return;
    const leaf = await this.getFileExplorerLeaf();
    const scroller = leaf.view.tree.infinityScroll;
    const self = this;
    const patched = {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      apply(target, ctx, args) {
        Reflect.apply(target, ctx, args);
        if (self.settings.showHeadingsForAllFolders || ctx.file.parent && self.settings.showHeadingFolders.contains(
          ctx.file.parent.path
        )) {
          self.createHeadingsForFile(ctx.file);
          scroller.invalidate(ctx, false);
        }
      }
    };
    const proxyFn = new Proxy(proto.updateTitle, patched);
    proto.updateTitle = proxyFn;
    proto._obsidianHeadingPlugin_patched = true;
  }
  async init() {
    this.setupLocateButton();
    if (!this.settings.showHeadings) {
      this.clearExplorerHeight();
      return;
    }
    const files = this.app.vault.getMarkdownFiles();
    for (const file of files) {
      if (this.settings.showHeadingsForAllFolders || file.parent && this.settings.showHeadingFolders.contains(file.parent.path)) {
        const headingsForFile = await this.createHeadingsForFile(
          file
        );
        this.cachedHeadings[file.name] = headingsForFile;
      }
    }
    this.clearExplorerHeight();
  }
  async setupLocateButton() {
    var _a;
    const fileExplorer = await this.getFileExplorerLeaf();
    const headerDom = fileExplorer.view.headerDom;
    (_a = headerDom.navButtonsEl.querySelector(".highlight-file-button")) == null ? void 0 : _a.remove();
    if (fileExplorer) {
      const navButton = headerDom.addNavButton(
        "crosshair",
        "Highlight location",
        () => this.highlightFileWithHeading(fileExplorer)
      );
      navButton.addClass("highlight-file-button");
    }
  }
  async highlightFileWithHeading(fileExplorer) {
    var _a;
    const activeLeaf = this.lastActiveMarkdownLeaf;
    if (!activeLeaf) {
      return;
    }
    const activeLeafView = activeLeaf.view;
    const activeFile = activeLeafView.file;
    if (!activeFile) {
      return;
    }
    const activeHeadings = this.cachedHeadings[activeFile.name];
    fileExplorer.view.revealInFolder(activeFile);
    const cursor = activeLeafView.editor.getCursor();
    const line = cursor.line;
    const closestLine = this.findClosestLineOnOrAbove(activeHeadings, line);
    if (closestLine) {
      (_a = closestLine.uiElement) == null ? void 0 : _a.addClass("highlighted-heading");
      setTimeout(() => {
        var _a2;
        (_a2 = closestLine.uiElement) == null ? void 0 : _a2.removeClass("highlighted-heading");
      }, 2e3);
    }
  }
  async createHeadingsForFile(file) {
    const fileCache = this.app.metadataCache.getFileCache(file);
    if (!fileCache) {
      return;
    }
    const headings = fileCache.headings || [];
    const mappedHeadings = headings.reduce(
      (acc, heading) => {
        if (heading.level === 1 && !this.settings.showHeading1 || heading.level === 2 && !this.settings.showHeading2 || heading.level === 3 && !this.settings.showHeading3 || heading.level === 4 && !this.settings.showHeading4 || heading.level === 5 && !this.settings.showHeading5 || heading.level === 6 && !this.settings.showHeading6) {
          return acc;
        }
        const line = heading.position.start.line;
        const headingText = heading.heading;
        const level = heading.level;
        acc.push({
          text: headingText,
          level,
          line
        });
        return acc;
      },
      []
    );
    if (this.settings.regexArray.length === 0) {
      mappedHeadings.sort((a, b) => a.line - b.line);
      await this.createClickableHeadings(file, mappedHeadings);
      return mappedHeadings;
    }
    const fileContent = await this.app.vault.read(file);
    const fileLines = fileContent.split("\n");
    const matchedHeadings = [];
    fileLines.forEach((line, index) => {
      this.settings.regexArray.forEach((regexSetting) => {
        const regex = new RegExp(regexSetting.pattern);
        const matches = line.match(regex);
        if (matches) {
          if (matches.length < 1) {
            matchedHeadings.push({
              text: matches[0],
              level: regexSetting.level,
              line: index
            });
          } else {
            matchedHeadings.push({
              text: matches[1],
              level: regexSetting.level,
              line: index
            });
          }
        }
      });
    });
    const allHeadings = [...mappedHeadings, ...matchedHeadings].sort(
      (a, b) => a.line - b.line
    );
    await this.createClickableHeadings(file, allHeadings);
    return allHeadings;
  }
  async clearExplorerHeight() {
    const leaf = await this.getFileExplorerLeaf();
    leaf.view.tree.infinityScroll.invalidateAll();
  }
  async getFileExplorerFileItems() {
    return (await this.getFileExplorerLeaf()).view.fileItems;
  }
  async getFileExplorerLeaf() {
    return new Promise((resolve, reject) => {
      let foundLeaf = null;
      this.app.workspace.iterateAllLeaves((leaf) => {
        if (foundLeaf) {
          return;
        }
        const view = leaf.view;
        if (!view || !view.fileItems) {
          return;
        }
        foundLeaf = leaf;
        window.leaf = leaf;
        resolve(foundLeaf);
      });
      if (!foundLeaf) {
        reject(Error("Could not find file explorer leaf."));
      }
    });
  }
  getHeadingContainer(item) {
    const existingContainer = item.querySelector(".file-heading-container");
    if (existingContainer) {
      return existingContainer;
    }
    const newContainer = document.createElement("div");
    newContainer.classList.add("file-heading-container");
    item.appendChild(newContainer);
    return newContainer;
  }
  async clearHeadings() {
    const fileExplorerLeafItems = await this.getFileExplorerFileItems();
    for (const key in fileExplorerLeafItems) {
      if (!fileExplorerLeafItems.hasOwnProperty(key))
        continue;
      const obj = fileExplorerLeafItems[key];
      const item = obj.innerEl;
      const headingContainer = this.getHeadingContainer(item);
      headingContainer.replaceChildren();
    }
  }
  async clearHeadingsForFolder(folder) {
    const fileExplorerLeafItems = await this.getFileExplorerFileItems();
    for (const file of folder.children) {
      if ("children" in file)
        continue;
      const key = file.path;
      if (!fileExplorerLeafItems.hasOwnProperty(key))
        continue;
      const obj = fileExplorerLeafItems[key];
      const item = obj.innerEl;
      const headingContainer = this.getHeadingContainer(item);
      headingContainer.replaceChildren();
    }
  }
  async createClickableHeadings(file, headings) {
    if (headings.length === 0) {
      return;
    }
    const fileExplorerLeafItems = await this.getFileExplorerFileItems();
    const fileItem = fileExplorerLeafItems[file.path];
    const item = fileItem.innerEl;
    const headingContainer = this.getHeadingContainer(item);
    headingContainer.replaceChildren();
    headings.forEach((heading) => {
      const headingItem = document.createElement("div");
      headingItem.textContent = heading.text;
      headingItem.classList.add("clickable-heading");
      headingItem.on("click", "*", (e) => {
        e.preventDefault();
        this.app.workspace.openLinkText("", file.path, false, {
          active: true,
          eState: {
            line: heading.line
          }
        }).then(() => {
          setTimeout(() => {
            this.unhighlightSelection(heading.line);
          }, 500);
        });
      });
      headingItem.on("auxclick", "*", (e) => {
        if (e.button !== 1)
          return;
        e.preventDefault();
        this.app.workspace.openLinkText("", file.path, true, {
          active: true,
          eState: {
            line: heading.line
          }
        }).then(() => {
          setTimeout(() => {
            this.unhighlightSelection(heading.line);
          }, 500);
        });
      });
      const getMarginMultiplier = parseInt(
        getComputedStyle(document.body).getPropertyValue(
          "--clickable-heading-margin-multiplier"
        )
      ) || 10;
      headingItem.style.marginLeft = `${(heading.level - 1) * getMarginMultiplier}px`;
      heading.uiElement = headingItem;
      headingContainer.appendChild(headingItem);
    });
  }
  unhighlightSelection(line) {
    var _a;
    const activeLeafView = (_a = this.lastActiveMarkdownLeaf) == null ? void 0 : _a.view;
    const position = { line, ch: 0 };
    activeLeafView.editor.setCursor(position);
    activeLeafView.editor.focus();
    activeLeafView.editor.setSelection(position, position);
    activeLeafView.editor.removeHighlights();
  }
  registerFolderHeadingContextMenu() {
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, abstractFile) => {
        if (abstractFile instanceof import_obsidian.TFolder) {
          const showNoteHeadings = this.settings.showHeadingFolders.includes(
            abstractFile.path
          );
          menu.addItem(
            (item) => item.setTitle(
              showNoteHeadings ? "Hide headings for notes" : "Show headings for notes"
            ).setIcon("heading").onClick(() => {
              if (showNoteHeadings) {
                this.settings.showHeadingFolders = this.settings.showHeadingFolders.filter(
                  (p) => p != abstractFile.path
                );
                this.clearHeadingsForFolder(abstractFile);
              } else {
                this.settings.showHeadingFolders.push(
                  abstractFile.path
                );
              }
              this.saveSettings();
            })
          );
        }
      })
    );
  }
  onunload() {
    this.clearHeadings();
  }
  async loadSettings() {
    this.settings = Object.assign({}, USER_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.init();
  }
  async recalculateHeadings() {
    this.cachedHeadings = {};
    await this.clearHeadings();
    await this.init();
  }
};
var HeadingSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
    this.regexArray = this.plugin.settings.regexArray || [];
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Show headings").setDesc(
      "Show headings in the file explorer. Toggle off to restore normal headings."
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showHeadings).onChange(async (value) => {
        this.plugin.settings.showHeadings = value;
        await this.plugin.saveSettings();
        this.plugin.recalculateHeadings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Show Headings For All Folders").setDesc(
      "Show headings for notes in all folders. If disabled, you can enable headings for specific folders by right-clicking the folder and selecting the option from the context menu."
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showHeadingsForAllFolders).onChange(async (value) => {
        this.plugin.settings.showHeadingsForAllFolders = value;
        await this.plugin.saveSettings();
        this.plugin.recalculateHeadings();
        this.display();
      })
    );
    if (!this.plugin.settings.showHeadingsForAllFolders) {
      new import_obsidian.Setting(containerEl).setName("Folder-specific headings").setHeading();
      const descEl = containerEl.createEl("div", {
        cls: "setting-item-description",
        text: "Manage which folders show headings. You can also add or remove folders by right-clicking them in the file browser."
      });
      descEl.style.marginBottom = "1em";
      descEl.style.fontStyle = "italic";
      const foldersEl = containerEl.createDiv("enabled-folders");
      this.plugin.settings.showHeadingFolders.forEach(
        (folderPath, index) => {
          this.addFolderRow(foldersEl, folderPath, index);
        }
      );
      this.addNewFolderRow(foldersEl);
    }
    new import_obsidian.Setting(containerEl).setName("Control which headings are displayed").setHeading();
    new import_obsidian.Setting(containerEl).setName("Show heading 1").setDesc("Show heading 1 in the file explorer.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showHeading1).onChange(async (value) => {
        this.plugin.settings.showHeading1 = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Show heading 2").setDesc("Show heading 2 in the file explorer.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showHeading2).onChange(async (value) => {
        this.plugin.settings.showHeading2 = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Show heading 3").setDesc("Show heading 3 in the file explorer.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showHeading3).onChange(async (value) => {
        this.plugin.settings.showHeading3 = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Show heading 4").setDesc("Show heading 4 in the file explorer.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showHeading4).onChange(async (value) => {
        this.plugin.settings.showHeading4 = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Show heading 5").setDesc("Show heading 5 in the file explorer.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showHeading5).onChange(async (value) => {
        this.plugin.settings.showHeading5 = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Show heading 6").setDesc("Show heading 6 in the file explorer").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showHeading6).onChange(async (value) => {
        this.plugin.settings.showHeading6 = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Custom heading patterns").setHeading();
    const regexEl = containerEl.createDiv("regex-patterns");
    new import_obsidian.Setting(this.containerEl).addButton((button) => {
      button.setButtonText("Add regex pattern").onClick(() => {
        this.addRegexPatternField(regexEl);
      });
    });
    this.regexArray.forEach((pattern, index) => {
      this.addRegexPatternField(regexEl, pattern, index);
    });
    new import_obsidian.Setting(containerEl).setName("Troubleshoot").setHeading();
    new import_obsidian.Setting(containerEl).setName("Recalculate headings").setDesc("Recalculates the headings for all files in the vault.").addButton((button) => {
      button.setButtonText("Recalculate headings").setWarning().onClick(async () => {
        this.plugin.recalculateHeadings();
        new import_obsidian.Notice("Headings recalculated.");
      });
    });
    new import_obsidian.Setting(containerEl).setName("Reset to default").setDesc("Reset all settings to default values.").addButton((button) => {
      button.setButtonText("Reset to default").setWarning().onClick(async () => {
        this.plugin.settings = structuredClone(
          DEFAULT_SETTINGS
        );
        this.regexArray = this.plugin.settings.regexArray;
        await this.plugin.saveSettings();
        this.display();
        this.plugin.recalculateHeadings();
        new import_obsidian.Notice("Settings reset to default.");
      });
    });
  }
  addFolderRow(foldersEl, folderPath, index) {
    const setting = new import_obsidian.Setting(foldersEl).setName(folderPath || "Empty path").setDesc(`Folder path: ${folderPath}`);
    setting.addButton((button) => {
      button.setButtonText("Remove").setTooltip("Remove this folder from the list").onClick(async () => {
        const folder = this.app.vault.getAbstractFileByPath(folderPath);
        if (folder instanceof import_obsidian.TFolder) {
          await this.plugin.clearHeadingsForFolder(folder);
        }
        this.plugin.settings.showHeadingFolders.splice(index, 1);
        await this.plugin.saveSettings();
        this.display();
      });
    });
  }
  addNewFolderRow(foldersEl) {
    let newFolderPath = "";
    const setting = new import_obsidian.Setting(foldersEl).setName("Add new folder").setDesc(
      "Enter the folder path to enable headings for that folder"
    );
    setting.addText(
      (text) => text.setPlaceholder(
        "Enter folder path (e.g., 'My Folder' or 'Parent/Child')"
      ).onChange((value) => {
        newFolderPath = value;
      })
    );
    setting.addButton((button) => {
      button.setButtonText("Add").setTooltip("Add this folder to the list").onClick(async () => {
        if (newFolderPath.trim() && !this.plugin.settings.showHeadingFolders.includes(
          newFolderPath.trim()
        )) {
          this.plugin.settings.showHeadingFolders.push(
            newFolderPath.trim()
          );
          await this.plugin.saveSettings();
          this.display();
        } else if (this.plugin.settings.showHeadingFolders.includes(
          newFolderPath.trim()
        )) {
          new import_obsidian.Notice("This folder is already in the list.");
        } else {
          new import_obsidian.Notice("Please enter a valid folder path.");
        }
      });
    });
  }
  addRegexPatternField(regexEl, regexSetting = { pattern: "", level: 1 }, index = this.regexArray.length) {
    const setting = new import_obsidian.Setting(regexEl).setName(`Custom pattern`).setDesc(`Enter a regex pattern and specify its level.`);
    setting.addText(
      (text) => text.setValue(regexSetting.pattern).setPlaceholder("Enter regex pattern...").onChange(async (value) => {
        this.regexArray[index] = {
          ...this.regexArray[index],
          pattern: value
        };
        await this.plugin.saveSettings();
      })
    );
    setting.addSlider(
      (slider) => slider.setLimits(1, 7, 1).setValue(regexSetting.level).setDynamicTooltip().onChange(async (value) => {
        this.regexArray[index] = {
          ...this.regexArray[index],
          level: value
        };
        await this.plugin.saveSettings();
      })
    );
    setting.addButton((button) => {
      button.setButtonText("Delete").onClick(async () => {
        this.regexArray.splice(index, 1);
        await this.plugin.saveSettings();
        this.display();
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
